% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forecast.R
\name{as_forecast}
\alias{as_forecast}
\alias{as_forecast_point}
\alias{as_forecast_binary}
\alias{as_forecast_quantile}
\alias{as_forecast_sample}
\title{Create a \code{forecast} object}
\usage{
as_forecast_point(
  data,
  forecast_unit = NULL,
  observed = NULL,
  predicted = NULL,
  model = NULL
)

as_forecast_binary(
  data,
  forecast_unit = NULL,
  observed = NULL,
  predicted = NULL,
  model = NULL
)

as_forecast_quantile(
  data,
  forecast_unit = NULL,
  observed = NULL,
  predicted = NULL,
  model = NULL,
  quantile_level = NULL
)

as_forecast_sample(
  data,
  forecast_unit = NULL,
  observed = NULL,
  predicted = NULL,
  model = NULL,
  sample_id = NULL
)
}
\arguments{
\item{data}{A data.frame (or similar) with predicted and observed values.
See the details section of \code{\link[=as_forecast]{as_forecast()}} for additional information
on required input formats.}

\item{forecast_unit}{(optional) Name of the columns in \code{data} (after
any renaming of columns) that denote the unit of a
single forecast. See \code{\link[=get_forecast_unit]{get_forecast_unit()}} for details.
If \code{NULL} (the default), all columns that are not required columns are
assumed to form the unit of a single forecast. If specified, all columns
that are not part of the forecast unit (or required columns) will be removed.}

\item{observed}{(optional) Name of the column in \code{data} that contains the
observed values. This column will be renamed to "observed".}

\item{predicted}{(optional) Name of the column in \code{data} that contains the
predicted values. This column will be renamed to "predicted".}

\item{model}{(optional) Name of the column in \code{data} that contains the names
of the models/forecasters that generated the predicted values.
This column will be renamed to "model".}

\item{quantile_level}{(optional) Name of the column in \code{data} that contains
the quantile level of the predicted values. This column will be renamed to
"quantile_level". Only applicable to quantile-based forecasts.}

\item{sample_id}{(optional) Name of the column in \code{data} that contains the
sample id. This column will be renamed to "sample_id". Only applicable to
sample-based forecasts.}
}
\value{
Depending on the forecast type, an object of the following class will be
returned:
\itemize{
\item \code{forecast_binary} for binary forecasts
\item \code{forecast_point} for point forecasts
\item \code{forecast_sample} for sample-based forecasts
\item \code{forecast_quantile} for quantile-based forecasts
}
}
\description{
Process and validate a data.frame (or similar) or similar with forecasts
and observations. If the input passes all input checks, it will be converted
to a \code{forecast} object. A forecast object is a \code{data.table} with a
class \code{forecast} and an additional class that depends on the forecast type.
Every forecast type has its own \code{as_forecast_()} function.
See the details section below for more information
on the expected input formats.

The \code{as_forecast_()} functions give users some control over how their data
is parsed.
Using the arguments \code{observed}, \code{predicted}, \code{model}, etc. users can rename
existing columns of their input data to match the required columns for a
forecast object. Using the argument \code{forecast_unit}, users can specify the
the columns that uniquely identify a single forecast (and remove the others,
see \code{\link[=set_forecast_unit]{set_forecast_unit()}} for details).
}
\section{Forecast types and input formats}{
Various different forecast types / forecast formats are supported. At the
moment, those are:
\itemize{
\item point forecasts
\item binary forecasts ("soft binary classification")
\item Probabilistic forecasts in a quantile-based format (a forecast is
represented as a set of predictive quantiles)
\item Probabilistic forecasts in a sample-based format (a forecast is represented
as a set of predictive samples)
}

Forecast types are determined based on the columns present in the input data.
Here is an overview of the required format for each forecast type:
\if{html}{
  \out{<div style="text-align: left">}
  \figure{required-inputs.png}{options: style="width:750px;max-width:100\%;"}
  \out{</div>}
}
\if{latex}{
  \figure{required-inputs.png}
}

\emph{All forecast types} require a data.frame or similar with columns \code{observed}
\code{predicted}, and \code{model}.

\emph{Point forecasts} require a column \code{observed} of type numeric and a column
\code{predicted} of type numeric.

\emph{Binary forecasts} require a column \code{observed} of type factor with exactly
two levels and a column \code{predicted} of type numeric with probabilities,
corresponding to the probability that \code{observed} is equal to the second
factor level. See details \link[=brier_score]{here} for more information.

\emph{Quantile-based forecasts} require a column \code{observed} of type numeric,
a column \code{predicted} of type numeric, and a column \code{quantile_level} of type
numeric with quantile-levels (between 0 and 1).

\emph{Sample-based forecasts} require a column \code{observed} of type numeric,
a column \code{predicted} of type numeric, and a column \code{sample_id} of type
numeric with sample indices.

For more information see the vignettes and the example data
(\link{example_quantile}, \link{example_sample_continuous}, \link{example_sample_discrete},
\code{\link[=example_point]{example_point()}}, and \link{example_binary}).
}

\section{Forecast unit}{
In order to score forecasts, \code{scoringutils} needs to know which of the rows
of the data belong together and jointly form a single forecasts. This is
easy e.g. for point forecast, where there is one row per forecast. For
quantile or sample-based forecasts, however, there are multiple rows that
belong to a single forecast.

The \emph{forecast unit} or \emph{unit of a single forecast} is then described by the
combination of columns that uniquely identify a single forecast.
For example, we could have forecasts made by different models in various
locations at different time points, each for several weeks into the future.
The forecast unit could then be described as
\code{forecast_unit = c("model", "location", "forecast_date", "forecast_horizon")}.
\code{scoringutils} automatically tries to determine the unit of a single
forecast. It uses all existing columns for this, which means that no columns
must be present that are unrelated to the forecast unit. As a very simplistic
example, if you had an additional row, "even", that is one if the row number
is even and zero otherwise, then this would mess up scoring as \code{scoringutils}
then thinks that this column was relevant in defining the forecast unit.

In order to avoid issues, we recommend setting the forecast unit explicitly,
usually through the \code{forecast_unit} argument in the \code{\link[=as_forecast]{as_forecast()}}
functions. This will drop unneeded columns, while making sure that all
necessary, 'protected columns' like "predicted" or "observed" are retained.
}

\examples{
as_forecast_binary(example_binary)
as_forecast_quantile(
  example_quantile,
  forecast_unit = c("model", "target_type", "target_end_date",
                    "horizon", "location")
)
}
\keyword{check-forecasts}
